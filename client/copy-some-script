#!/usr/bin/env python3

import json
import grpc
import sys

import fossildbapi_pb2 as proto
import fossildbapi_pb2_grpc as proto_rpc

def main():
    verbose = False

    collectionsByTyp = {
        'skeleton': ['skeletons', 'skeletonUpdates'],
        'volume': ['volumes', 'volumeData']
    }

    srcPort = 7156
    dstPort = 7156

    tracingReferences = json.load(open('tracingReferences.json'))

    srcChannel = grpc.insecure_channel('localhost:{}'.format(srcPort))
    srcStub = proto_rpc.FossilDBStub(srcChannel)

    dstChannel = grpc.insecure_channel('localhost:{}'.format(dstPort))
    dstStub = proto_rpc.FossilDBStub(dstChannel)

    testHealth(srcStub, 'source fossildb at {}'.format(srcPort))
    testHealth(dstStub, 'destination fossildb at {}'.format(dstPort))

    putCount = 0

    for tracingReference in tracingReferences:
        key = tracingReference['id']
        if verbose:
            print('    copying key ', key)
        for collection in collectionsByTyp[tracingReference['typ']]:
            getMultipleVersionsReply = srcStub.GetMultipleVersions(proto.GetMultipleVersionsRequest(collection=collection, key=key))
            assertSuccess(getMultipleVersionsReply)
            if len(getMultipleVersionsReply.versions) == 0:
                print('[warn] no data for', key, 'in', collection)
            for versionValueTuple in zip(getMultipleVersionsReply.versions, getMultipleVersionsReply.values):
                if verbose:
                    print('      copying version ', versionValueTuple[0])
                putReply = dstStub.Put(proto.PutRequest(collection=collection, key=key, version=versionValueTuple[0], value=versionValueTuple[1]))
                assertSuccess(putReply)
                putCount += 1
                if (verbose and putCount % 10 == 0) or putCount % 10000 == 0:
                    print("total put count:", putCount)
    print("Done. total put count:", putCount)

def testHealth(stub, label):
    try:
        reply = stub.Health(proto.HealthRequest())
        assertSuccess(reply)
        print('successfully connected to ' + label)
    except Exception as e:
        print('failed to connect to ' + label + ': ' + str(e))
        sys.exit(1)

def assertSuccess(reply):
    if not reply.success:
        raise Exception("reply.success failed: " + reply.errorMessage)

if __name__ == '__main__':
    main()
