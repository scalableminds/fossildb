#!/usr/bin/env python3

import argparse
import grpc
import sys

import fossildbapi_pb2 as proto
import fossildbapi_pb2_grpc as proto_rpc

from grpc_health.v1 import health_pb2
from grpc_health.v1 import health_pb2_grpc


def parse_args(commands):
    parser = argparse.ArgumentParser()
    parser.add_argument(
        'address', metavar='address', default='localhost', nargs='?',
        help='address of the fossildb server (default: %(default)s)')
    parser.add_argument(
        'port', metavar='port', type=int, default=7155,  nargs='?',
        help='port of the fossildb server (default: %(default)s)')
    parser.add_argument(
        'command', metavar='command',
        help='command to execute, one of {}'.format(list(commands.keys())))

    args = parser.parse_args()
    if args.command not in commands:
        print("command {} is not available".format(args.command))
        parser.print_help()
        exit(20)

    return args


def health(channel):
    try :
        healthStub = health_pb2_grpc.HealthStub(channel)
        reply = healthStub.Check(health_pb2.HealthCheckRequest(service=''))
        STATUSMAP = health_pb2._HEALTHCHECKRESPONSE_SERVINGSTATUS.values_by_name
        SERVING = STATUSMAP["SERVING"].number
        if reply.status != SERVING:
            raise Exception(reply.status)
    except Exception as e:
        print('Health check unsuccessful. FossilDB offline?')
        print(e)
        sys.exit(1)
    return reply


def main():
    commands = {
        'backup': lambda channel:
            proto_rpc.FossilDBStub(channel).Backup(proto.BackupRequest()),
        'restore': lambda channel:
            proto_rpc.FossilDBStub(channel).RestoreFromBackup(proto.RestoreFromBackupRequest()),
        'health': health
    }

    args = parse_args(commands)
    full_address = '{}:{}'.format(args.address, args.port)

    print('Connecting to FossilDB at', full_address)
    channel = grpc.insecure_channel(full_address)

    reply = commands[args.command](channel)
    print(reply)
    if hasattr(reply, 'success') and not reply.success:
        sys.exit(1)


if __name__ == '__main__':
    main()
